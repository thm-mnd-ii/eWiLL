version: "3.8"
services:
  core:
    container_name: core
    restart: unless-stopped
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: modules/core/api/Dockerfile
    volumes:
      - .:/app
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update

  demoservice:
    container_name: demoservice
    # restart: unless-stopped
    build:
      context: .
      dockerfile: modules/core/checker/demoService/Dockerfile
    volumes:
      - .:/app
    ports:
      - "80:80"
    depends_on:
      - core
      - mongodb

  postgres:
    container_name: postgres
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=postgres
    ports:
      # TODO remove for production
      - "5433:5432"
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    container_name: mongodb
    image: mongo:7.0.0
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongoadmin
      - MONGO_INITDB_ROOT_PASSWORD=mongoadmin
      - MONGO_INITDB_DATABASE=AssessmentDatabase
    ports:
      # TODO remove for production
      - "27018:27017"
    volumes:
      - data:/data/db
    healthcheck:
      test: ["CMD-SHELL", 'mongo --eval "printjson(db.serverStatus())"']
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  data:
